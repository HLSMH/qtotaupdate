SUMMARY

    OSTree Based Over-The-Air Update Solution.

    This repository contains a script that takes embedded linux sysroot and converts it into
    a OTA Update ready sysroot. The same script can be used to generate all subsequent updates
    for a OTA Update ready device in field for a remote system update.

    TODO: add some notes on how updates are performed (atomic, power down safe, must restart, rollback).

REQUIREMENTS

    1) U-Boot tools package is required. In Ubuntu, this can be install with the following command:

        sudo apt-get install u-boot-tools

    2) The 'ostree' binary must be in the PATH.

        The binary is available in the b2qt SDK under the following path:
        SDK_INSTALL_DIR/${QT_VERSION}/Boot2Qt/${DEVICE}/toolchain/sysroots/x86_64-pokysdk-linux/usr/bin

    3) The target system must be using u-boot boot loader.

       And reading from ext2 file system must be supported by u-boot.

    4) The kernel must have support for initramfs enabled.*

       CONFIG_BLK_DEV_INITRD=y

     * There are ways around that, but we currently do not support this out-of-box:
       https://mail.gnome.org/archives/ostree-list/2015-October/msg00015.html

DOCS

    OSTree does not come as installable package on Ubuntu. To obtain man pages for
    ostree command line tool they must be generated and installed manually. Here are
    the steps:

    Install the required packages (tested on a freshly installed Ubuntu 14.04):

    sudo apt-get install git autoconf gtk-doc-tools libattr1-dev libcap-dev libghc-gio-dev \
    liblzma-dev e2fslibs-dev libgpgme11-dev libsoup2.4-dev libarchive-dev

    Build a dependency library:

    1) git clone https://github.com/GNOME/libgsystem.git
    2) cd libgsystem
    3) git submodule update --init
    4) ./autogen.sh
    5) make
    6) sudo make install
    7) cd ..

    Generate and install OSTree man pages:

    1) git clone https://github.com/GNOME/ostree.git
    2) cd ostree
    3) ./autogen.sh --enable-introspection=no --enable-gtk-doc --enable-gtk-doc-html
    4) make
    5) sudo make install

QUICK START GUIDE

    Note: This guide describes only one of many possible update workflows. For more info on ostree
    commands refer to the ostree man pages. To see a full list of available command line parameters
    of the prepare-update.sh script run:

    ./prepare-update.sh --help

    0) Download and Install the B2Qt SDK.

        Later in the guide we will refer to this install directory as SDK_INSTALL_DIR.

        Build your product on top of b2qt or a custom embedded linux image and when
        the image is ready for a *first release* continue to the next step in this guide.

CASE 1:

    When preparing a device for shipping and subsequent updates to a device are planned to
    be delivered via OTA, you have to enable this feature in the sysroot first.

    1) Add 'ostree' binary to the PATH.

        export SDK_INSTALL_DIR/${QT_VERSION}/Boot2Qt/${DEVICE}/toolchain/sysroots/x86_64-pokysdk-linux/usr/bin:$PATH

    2) Generate initramfs image.

        Important!

            Your device should be powered on (booted into your current product) and connected to a
            machine from which you will run the dracut/generate-initramfs.sh script. Dracut generates
            initramfs based on the currently running kernel. You can of course provide your own initramfs
            (not necessarily dracut based) as long as you include the required ostree logic from dracut/
            directory. If using dracut, make sure it is availalbe on your device when running this script.

        To generate the initramfs image run:

        cd dracut/
        ./generate-initramfs.sh

        This will produce ota-initramfs.ub file in the dracut/ directory. We will need this file in the
        later steps.

    3) Add OSTree support in device's u-boot environment.

        OSTree maintains an environment file located at /uEnv.txt on the boot partition.
        Your u-boot script should import this environment.

        Important! Do not modify the uEnv.txt file on a device.

        One example content of this file could look like this:

        cat uEnv.txt

        kernel_image=/ostree/b2qt-23dab5f9942fd52b71f7a068ad65315b08b49ffc96427056c93e6b04f24ef703/vmlinuz
        bootdir=/ostree/b2qt-23dab5f9942fd52b71f7a068ad65315b08b49ffc96427056c93e6b04f24ef703
        ramdisk_image=/ostree/b2qt-23dab5f9942fd52b71f7a068ad65315b08b49ffc96427056c93e6b04f24ef703/initramfs
        bootargs=ostree=/ostree/boot.1/b2qt/23dab5f9942fd52b71f7a068ad65315b08b49ffc96427056c93e6b04f24ef703/0

        Where:

        ${kernel_image}:  path to the Linux kernel image
        ${ramdisk_image}: path to the initial ramdisk image
        ${bootargs}:      parameters passed to the kernel command line
        ${bootdir}:       additional files that are required for booting like DTBs

        Example u-boot logic that uses the imported OSTree's environmental variables:

        setenv scriptaddr 0x40008000
        setenv kernel_addr 0x40007000
        setenv ramdisk_addr 0x42000000
        load mmc 0:1 ${scriptaddr} uEnv.txt
        env import -t ${scriptaddr} ${filesize}
        load mmc 0:1 ${kernel_addr} ${kernel_image}
        load mmc 0:1 ${ramdisk_addr} ${ramdisk_image}
        bootz ${kernel_addr} ${ramdisk_addr}

        The generated initramfs (from step 2) will read the "ostree=" parameter from the kernel command
        command line to find and setup the correct root file system.

        Notes:

        - You should expect to find all boot files on the boot partition. Some devices by default keep
        some files on rootfs partiton (kernel, dtbs and etc.), when generating OTA update enabled sysroot
        we move all these files on the boot partition. Before starting to write a boot script you can run
        the b2qt-ostree/prepare-update.sh script without providing the --uboot-env-file and examine the
        layout of generated boot partition in b2qt-ostree/sysroot/boot/.

        - Boot partition by default is formated as ext2.

        You can find some detailed examples for real devices in the examples/ directory.

    4) Convert your sysroot into OTA enabled sysroot.

        Do this by running the b2qt-ostree/prepare-update.sh script.
        Here is an example for nitrogen6x board:

        cd b2qt-ostree/
        ./prepare-update.sh --sysroot-image-path ${SDK_INSTALL_DIR}/5.5/Boot2Qt/nitrogen6x-eLinux/images/ \
                            --create-initial-deployment \
                            --initramfs ../dracut/ota-initramfs.ub \
                            --uboot-env-file ../examples/nitrogen6x/b2qt-5.5/6x_bootscript

        The --create-initial-deployment tells the script to prepare an initial deployment sysroot that you
        will have to deploy to an sdcard by placing it into your computer's sdcard slot (see step 5).

        The --uboot-env-file argument is optional since you can store the required boot script logic
        in your boards persistent storage (or define when building u-boot). File given to --uboot-env-file
        is copied into the boot partition.

    5) Deploy the generated initial deployment to an sdcard.

        Plug in the SD card or reader to the development host, and use the following command to find out
        its device name:

        lsblk -d

        And then deploy to the sdcard:

        cd b2qt-ostree/
        sudo ./deploy.sh /dev/<device_name>

    6) Test if everything went according to the plan.

        Boot from the sdcard and run the following command from the device:

        ostree admin status

        It should output something similar to:

        * b2qt 59a453916ae90f4a73ade9cb038d31557dbdfe514e7cd1c1002d856c28d618f5.0
            origin refspec: b2qt:qt/b2qt

        If you see this, everything went well.

CASE 2:

    When preparing a new update for an already OTA enabled device in field, the
    workflow is as follows:

    1) Work on your sysroot as you normally would. When the product is ready
       for a release continue to the next step.

    On A Server:

    2) Commit the new version of sysroot into a repository on a server or on your
       host machine for testing purposes.

        Example command:

        cd b2qt-ostree/
        ./prepare-update.sh --sysroot-image-path ${SDK_INSTALL_DIR}/5.6/Boot2Qt/nitrogen6x-eLinux/images/ \
                            --initramfs ../dracut/ota-initramfs.ub

        This will make a new commit in the b2qt-ostree/ostree-repo or another location if the
        --ostree-repo argument was provided.

        The script also starts httpd server which you can access on a local host with:

        http://127.0.0.1:${PORT}/ostree/

        You can find the port number in the b2qt-ostree/httpd/httpd-port file.
        Entering this address in the web browser should list contents of your OSTree repository.

        Notes on the --initramfs parameter:

            1) When doing a minor releases that do not update the kernel:

                Use the same initramfs which you already generated when preparing the initial deployment or
                if there already have been releases that update the kernel, use initramfs which was generated
                for the currently running kernel version.

            2) When doing a major release that updates a kernel:

                It is advised to regenerate initramfs for each new kernel release so that that the kernel and
                initramfs versions match. And if the new kernel/initramfs is *not compatible* with the boot
                script on a device it *must* be updated as well (see "Notes on the --uboot-env-file").

        Notes on the --sysroot-image-path parameter:

            Here you provide a path to the new version of your sysroot images. Notice that earlier we used
            a path that contains 5.5, but now we use 5.6.

        Notes on the --uboot-env-file:

            Updating u-boot environment file (uEnv.txt and/or u-boot boot script) is supported only for
            major releases - when kernel/initramfs versions change.

    On A Device:

    3) Add a remote repository.

        Note: If you already have a remote repository configured on the device, this step can be skipped.

        ostree remote add --no-gpg-verify b2qt http://${IP_OF_SERVER}:${PORT}/ostree qt/b2qt

        IP_OF_SERVER is the IP address of the server where you have stored your ostree-repo.

    4) Upgrade your device.

        ostree admin upgrade

    5) Reboot into the new system.

    6) Go to step 1.

EXAMPLES

    Find examples for real embedded devices in the /examples directory.

SYSTEM LAYOUT OF A OTA UPDATE READY IMAGE

    /usr [read-only]  - Everything that is part of the system and should not be modified by users.
    /etc [read-write] - System configurations. While updating OSTree does a basic 3-way merge,
                        which means that all local changes are preserved.
    /var [read-write] - The only directory that is preserved by OSTree across upgrades - this is
                        where user and application data should be stored. OSTree does not touch
                        the contents of /var; this directory is shared between updates.
    /boot               OSTree maintained. Contains boot loader configuration files and other files
                        that are required for booting.
    /                   Deployment's chroot. All other top level directories are garbage collected,
                        *unless they are symlinks pointing to one of the above directories*.

    The following top level directories are symlinks to the read-only /usr directory:

    /bin  -> usr/system/bin
    /data -> usr/system/data
    /lib  -> usr/system/lib
    /sbin -> usr/system/sbin

    The following top level directories are symlinks to the read-write /var directory, thus
    preserved by OSTree across upgrades:

    /home -> var/home

    Warning!

        Do not directly modify the contents of the /ostree/ directory.
        Do not modify the /sysroot/ directory.
        Do not store files or create directories in the root directory, as they will not be preserved across upgrades.
        Do not remount read-only /usr to read-write. The created files will be garbage collected on the next system upgrade.
        Do not modify uEnv.txt on a device.

    Important quote from OSTree man pages:

        "It must be emphasized that OSTree only supports read-only trees. To change to a different tree (upgrade, downgrade,
        install software), a new tree is checked out, and a 3-way merge of configuration is performed. The currently running
        tree is not ever modified; the new tree will become active on a system reboot."
