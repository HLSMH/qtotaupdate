/****************************************************************************
**
** Copyright (C) 2015 Digia Plc
** All rights reserved.
** For any questions to Digia, please use the contact form at
** http://www.qt.io
**
** This file is part of Qt Enterprise Embedded.
**
** Licensees holding valid Qt Enterprise licenses may use this file in
** accordance with the Qt Enterprise License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.
**
** If you have questions regarding the use of this file, please use
** the contact form at http://www.qt.io
**
****************************************************************************/
/*!
    \page qtee-ota.html
    \title Over-The-Air Update
    \previouspage qtee-module-reference.html

    Over-The-Air (OTA) update is a mechanism of distributing software updates
    over a wireless network, instead of requiring a physical access to a device.
    The target device needs to have a support for the OTA to be able to update
    wirelessly.

    OTA package provides tools that assist in enabling OTA update functionality
    in an embedded linux devices. Generating new updates for OTA enabled devices
    is completely automated, given an ordinary linux sysroot as an input. This
    includes generating updates for linux kernel, user space applications and
    system libraries, translation fixes, anything that is part of the sysroot.
    The OTA solution in \SDK is based on \l {OSTree Overview} {OSTree}.

    \section1 OSTree Overview

    The following is a brief summary from the OSTree documentation.

    \b {What is OSTree:}

    OSTree is an upgrade system for Linux-based operating systems that performs
    atomic upgrades of complete filesystem trees. The underlying architecture
    might be summarized as \e {git for operating system binaries}. At its core
    is a git-like content-addressed object store, and layered on top is a boot
    loader configuration, management of \c {/etc}, and other functions to perform
    an upgrade beyond just replicating files.

    It comes with a command line tool for managing multiple bootable versioned
    filesystem trees, or just \e tree for short. In the OSTree model, operating
    systems no longer live in the physical \c {"/"} root directory. Instead, they
    parallel install to the new toplevel \c {/ostree} directory. At boot time,
    one these parallel installed trees is switched to be the real \c {"/"} root.

    \omit
    TODO: Add something about OSTree repository on a static http server.
    \endomit

    \b {Features of the update system:}

    \list
    \li Atomic Upgrades (all or nothing) - if an update did not fully complete,
        for example due to a power failure, the system will boot into an unmodified
        tree. The currently running tree is never modified, the update will become
        active on a system reboot.
    \li Secure - GPG signing and pinned TLS with client and server side authentication
        support.
    \li Efficient Handling of Disk Space - see the \c {/ostree} and the \c {/var}
        in \l {Layout of an OTA Enabled Sysroot}.
    \li Predictable - traditional package managers (dpkg/rpm) build filesystem
        trees on the client side. In contrast, the primary focus of OSTree is on
        replicating trees composed on a server.
    \li Bandwidth Optimized - only files that have changed are downloaded.
    \li Configuration Management - see the \c {/etc} in \l {Layout of an OTA
        Enabled Sysroot}.
    \li Rollback Support - option to safely rollback to the previous version (tree)
        if something goes wrong (Not available in Tech Preview).
    \endlist

    If you would like to learn more about OSTree workings refer to the \l {OSTree
    Documentation}. There you can read about the anatomy of an OSTree repository
    and the deployment system, booting, and other internals of the project, as
    well as how OSTree compares to other update solutions.

    \section1 Requirements

    \list 1

      \li File systems.

      Because OSTree operates at the Unix filesystem layer, it works on top of
      any filesystem or block storage layout; it's possible to replicate a given
      filesystem tree from an OSTree repository into plain ext4, BTRFS, XFS, or
      in general any Unix-compatible filesystem that supports hard links.

      \li The kernel must be configured with initramfs enabled.*

      \badcode
      CONFIG_BLK_DEV_INITRD=y
      \endcode

     * There are ways around that, but we currently do not support this out of
      the box: \br
      \l https://mail.gnome.org/archives/ostree-list/2015-October/msg00015.html

      \li Supported boot loaders.

      \b {U-Boot:}

      \list
        \li Reading from a file system with symbolic links must be supported.
        \li U-Boot tools package is required. In Ubuntu, this can be installed
            with the following command:
            \badcode
            sudo apt-get install u-boot-tools
            \endcode
      \endlist

      \b {GRUB:}

      \list
          \li Not available in Tech Preview.
      \endlist

      \omit
      \li Partition layout.

      TODO

      \endomit

    \endlist

    \section1 Quick Start Guide

    This guide will lead you through the full workflow of how to use the provided
    OTA tools.
    \list
      \li Adding the OTA capability to a device before shipping it to a customer.
      \li Generating an update from the new version of your product's sysroot.
      \li Delivering this update to a customer device via OTA.
      \li Securing a delivery of an update.
    \endlist

    We will be using the \c qt-ostree tool. To see a full list of available command
    line arguments run the following command:

    \badcode
    ./qt-ostree/qt-ostree --help
    \endcode

    \section2 Install \SDK

    Download \SDK and follow the \l {Installation Guide}.

    Later in the guide, we will refer to this install directory as \c
    SDK_INSTALL_DIR.

    Build your product on top of \SDK or build your own custom embedded linux image.
    When the image is ready for the \e {first release}, continue to the next step
    in the guide.

    \section2 Enabling OTA Functionality on a Device

    When preparing a device for shipping and subsequent updates are to be delivered
    via OTA, you first need to enable this feature in the \e sysroot:

    \list 1
      \li Make sure that \e ostree binary is in the PATH.

          \badcode
          export <SDK_INSTALL_DIR>/Tools/ostree:$PATH
          \endcode

      \li Generate the \e initramfs image. \br \br

          OSTree integration code parses the \c ostree= kernel command line
          argument in the initramfs to find the correct versioned tree. It setups
          the necessary mounts, notably the read-only mount on the \c {/usr} path,
          and makes the versioned tree to appear as a real \c {"/"} root directory.
          The \c ostree= argument is passed via the boot loader integration code,
          explained in more detail later in the guide.

          To generate the initramfs image, run:

          \badcode
          ./dracut/generate-initramfs
          \endcode

          \b {Important:} The device should be powered on, booted into your current
          product (the sysroot to be released), and connected to a machine from
          which you will run the \c generate-initramfs tool. Dracut generates the
          initramfs image based on the currently running kernel. You can, of course,
          provide your own (not necessarily dracut based) initramfs, as long as
          you include the required ostree logic from the provided dracut module.

          \note The \c generate-initramfs works on \e systemd and \e sysvinit
          based systems.

          This will produce an \c initramfs-${device}-${release} file in the
          working directory. The initramfs file will be needed in the later steps.

      \li U-Boot Integration.

          Add OSTree support into U-Boot environment of the device. OSTree maintains
          an environment file \c uEnv.txt, which your U-Boot script should import.
          If custom changes to \c uEnv.txt are required, use the \c --uboot-env-file
          argument from the \c {qt-ostree} tool. The provided file will be merged
          with OSTree's maintained \c uEnv.txt.

          The content of OSTree's maintained \c uEnv.txt has the following format:

          \badcode
          kernel_image=/ostree/b2qt-23dab5f9942fd52b71f7a068ad65315b08b49ffc96427056c93e6b04f24ef703/vmlinuz
          bootdir=/ostree/b2qt-23dab5f9942fd52b71f7a068ad65315b08b49ffc96427056c93e6b04f24ef703
          ramdisk_image=/ostree/b2qt-23dab5f9942fd52b71f7a068ad65315b08b49ffc96427056c93e6b04f24ef703/initramfs
          bootargs=ostree=/ostree/boot.1/b2qt/23dab5f9942fd52b71f7a068ad65315b08b49ffc96427056c93e6b04f24ef703/0
          \endcode

          Where:

          \list
            \li \c ${kernel_image}: Path to the Linux kernel image.
            \li \c ${ramdisk_image}: Path to the initramfs image.
            \li \c ${bootargs}: Parameters passed to the kernel command line.
            \li \c ${bootdir}: Path to other files that belong to the same release
                   and should be accessible from U-Boot (DTBs, boot scripts).
          \endlist

          Example U-Boot logic that uses the imported OSTree's environment variables:

          \badcode
          setenv scriptaddr 0x40008000
          setenv kernel_addr 0x40007000
          setenv ramdisk_addr 0x42000000
          load mmc 0:1 ${scriptaddr} uEnv.txt
          env import -t ${scriptaddr} ${filesize}
          load mmc 0:1 ${kernel_addr} ${kernel_image}
          load mmc 0:1 ${ramdisk_addr} ${ramdisk_image}
          bootz ${kernel_addr} ${ramdisk_addr}
          \endcode

          You can find some detailed examples for real devices in the \c examples/
          directory.

          \note You should expect to find all the files that are required for the
          boot process under the \c ${bootdir} path. Before starting to write
          U-Boot integration code, you can run the \c qt-ostree tool without
          providing the \c --uboot-env-file argument, then examine the generated
          layout of the \c {$WORKDIR/sysroot/boot/} directory (see step 4).

      \li Convert your sysroot into an OTA enabled sysroot.

          The conversion is done using the \c qt-ostree tool.

          \badcode
          ./qt-ostree --sysroot-image-path ${SDK_INSTALL_DIR}/version-a/images/ \
                      --create-initial-deployment \
                      --initramfs ../dracut/initramfs-${device}-${release} \
                      --uboot-env-file ../examples/nitrogen6x_max/b2qt-5.5/6x_bootscript.txt
          \endcode

          The unarchived version of the generated sysroot can be examined at \c
          {$WORKDIR/sysroot/}.

          Notes on the arguments passed to \c {qt-ostree}:

          \list
              \li \b {\c --sysroot-image-path}
                  \list
                      \li A path to your sysroot image file(s). Binary images
                          (\c {*.img}) and archive images (\c {*.tar.gz}) are
                          accepted.
                  \endlist

              \li \b {\c --create-initial-deployment}
                  \list
                      \li This option tells the \c qt-ostree to prepare an \e
                          {initial sysroot}. You will have to deploy the generated
                          sysroot to a device; in this guide, we use an SD card
                          as memory media (see step 5).
                  \endlist

              \li \b {\c --initramfs}
                  \list
                      \li The initramfs image that we generated in the step 2.
                  \endlist

              \li \b {\c --uboot-env-file}
                  \list
                      \li A custom U-Boot \e {boot script} or \c uEnv.txt file.
                          This argument is optional as U-Boot environment can be
                          stored directly on the board's persistent storage
                          dedicated for U-boot environment, or defined when building
                          the U-Boot binary.
                  \endlist
          \endlist

      \li Deploy the generated sysroot to an SD card.

          Plug in an SD card or a reader to the development host, and use the
          following command to find out its device name:

          \badcode
          lsblk -d
          \endcode

          Then, deploy to the SD card:

          \badcode
          sudo ./deploy.sh /dev/<device_name>
          \endcode

      \li Test that everything went according to the plan.

          Boot from the SD card and run the following command \e {from the device}:

          \badcode
          ostree admin status
          \endcode

          The output should be something similar to:

          \badcode
          * b2qt 59a453916ae90f4a73ade9cb038d31557dbdfe514e7cd1c1002d856c28d618f5.0
              origin refspec: b2qt:qt/b2qt
          \endcode

          This indicates that the deployment was successful. You should also
          verify that application(s) are working as expected and do not write
          outside the \l {Layout of an OTA Enabled Sysroot}{permitted paths}.

        \endlist

    \section2 Preparing a New Update for an OTA Enabled Device

    When preparing a new update for a device that already has OTA enabled, the
    workflow is as follows:

    \list 1

      \li Work on your sysroot as you normally would. When the product is ready
          for a release, continue to the next step.

      \li Generate an update.

          This is done by using the \c qt-ostree tool.

          \badcode
          ./qt-ostree --sysroot-image-path ${SDK_INSTALL_DIR}/version-b/images/ \
                      --initramfs ../dracut/initramfs-${device}-${release} \
          \endcode

        This will create a new commit in the repository at \c {$WORKDIR/ostree-repo},
        or create a new repository if one does not exist in the specified path.
        Use the \c --ostree-repo argument to provide a custom path.

        \note This repository can be copied to a production server at any time.
        Devices when querying for an update will compare the repository on a server
        with the repository on a device to determine which files have changed and
        need updating.

        \omit
        TODO: Add a section on how to start a trivial httpd. \br
        \endomit

        The \c qt-ostree starts the httpd server which you can access on the local
        host at \c http://127.0.0.1:${PORT}/ostree/. Entering this address into
        a web browser lists the contents of your  OSTree repository.

        \c ${PORT} - the port number is listed in the \c $WORKDIR/httpd/httpd-port
        file.

        Notes on the arguments passed to \c {qt-ostree}:

        \list
            \li \b {\c --initramfs}
                \list
                    \li When doing \e {minor releases} that do not update the
                        kernel:

                        Use the same initramfs that you already have generated
                        for this kernel version in the earlier steps.

                    \li When doing a \e {major release} that updates a kernel:

                        It is advised to regenerate initramfs for each new
                        kernel release, so that the kernel and initramfs
                        versions \e match.

                        On U-Boot systems: If the new kernel/initramfs is \b
                        {not compatible} with the \e {boot script} on a device,
                        it \b must be updated as well (see the \c --uboot-env-file
                        notes below).
                \endlist
            \li \b {\c --sysroot-image-path}
                \list
                    \li Provide a path to the new version of your sysroot images.
                \endlist
            \li \b {\c --uboot-env-file}
                \list
                    \li Updating u-boot environment file is supported only for
                        major releases - when kernel/initramfs versions change.
                \endlist
        \endlist

      \note The kernel/initramfs \e version is considered to change when \c
      bootcsum changes in the following expression:

      \badcode
      bootcsum=$(cat vmlinuz initramfs | sha256sum | cut -f 1 -d ' ')
      \endcode

      \li \b {On a device:}

          Add a remote repository, as the device needs to know where to look for
          an update.

          \badcode
          ostree remote add --no-gpg-verify qt-os http://${SERVER_ADDRESS}:${PORT}/ostree linux/qt
          \endcode

          \c ${SERVER_ADDRESS} - the server where you have stored the OSTree
          repository. \br
          \c ${PORT} - optional port number.

      \li Upgrade your device.

          \badcode
          ostree admin upgrade
          \endcode

      \li Reboot into the new system.

    \endlist

    \section2 Securing a Delivery of an Update

    \omit
    TODO.
    \endomit

    \section1 Layout of an OTA Enabled Sysroot

    There are only two directories on a device for a safe storage of local files:
    \c {/var} and \c {/etc}.
    The sysroot generated by OTA tools adds convenience symbolic links in the
    \c {/} root directory, including symbolic links pointing to the \c {/var}.

    \b {Important:}
    \list
    \li Do not create or modify files in other locations, these files will be
        garbage collected on the next upgrade.
    \li Do not directly modify the contents of the \c {/ostree} and the \c {/boot}
        directory. This can result in a system that fails to boot.
    \endlist

    \table
    \header \li Directory         \li Description

    \row \li \c {/usr}\unicode {0xA0}[read\unicode {0x2011}only]

         \li Everything that is part of the OS and should not be modified by users.
             It's recommended that an operating system ships all of its content
             in /usr. Contents of this directory are updated via OTA.

    \row \li \c {/etc}

         \li Host-specific system-wide configuration files. OTA \e preserves all
             local changes by doing a 3-way merge. \br \br

             \b {How a 3-way merge works:}

             First OSTree checks on the \e {currently booted tree} which configuration
             files have been changed, removed or added by a user by comparing the
             /etc with the read-only /usr/etc/. The /usr/etc is where OSTree stores
             default configurations of the tree as composed on the server (each
             tree has its own read-only copy of the /usr/etc). The advantage of
             having read-only /usr/etc is that you always have access to system
             defaults.

             Then OSTree takes /etc of the \e {OTA update}, which is a separate
             copy from your running /etc (each tree has its own writable copy of
             the /etc) as a base and applies your local changes on top. It doesn’t
             attempt to understand the contents of files – if a configuration file
             on a device has been modified in any way, that wins.

    \row \li \c {/var}

         \li The only directory that is \e preserved and \e shared across upgrades.
             This is where user and application data should be stored. OSTree does
             not update the contents of /var, it is the responsibility of the OS
             to manage and upgrade /var if required.

    \row \li \c /ostree

         \li The location of the OSTree repository on a device and where the
             bootable versioned filesystem trees are installed. These trees \e
             share all common files via hard links into the OSTree repository.
             This means each version is deduplicated; an upgrade process only
             costs disk space proportional to the new files, plus some constant
             overhead.
             \note /ostree is a symbolic link to /sysroot/ostree.

    \row \li \c /boot

         \li Contains the boot loader configuration files, kernel, initramfs, and
             other files that are required for the boot process.

    \row \li \c /sysroot

         \li Physical / root directory.

    \row \li \c /

         \li Deployment's (versioned filesystem tree's) chroot.

    \endtable

    \section1 Device Integration Examples

    Find examples for real embedded devices in the \c /examples directory.

    \section1 OSTree Documentation

    OSTree does not come as an installable package, but you can refer to these
    online resources:

    \list
    \li HTML documentation for OSTree project \l https://developer.gnome.org/ostree/
    \li Man pages for the OSTree command line tool \l https://www.mankier.com/1/ostree
    \endlist

    The most recent documentation can be generated by obtaining and building the
    source code from \l https://github.com/GNOME/ostree.
*/
