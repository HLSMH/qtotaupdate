#!/bin/bash
#############################################################################
##
## Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
##
## This file is part of the Qt Enterprise Embedded Scripts of the Qt
## framework.
##
## $QT_BEGIN_LICENSE$
## Commercial License Usage Only
## Licensees holding valid commercial Qt license agreements with Digia
## with an appropriate addendum covering the Qt Enterprise Embedded Scripts,
## may use this file in accordance with the terms contained in said license
## agreement.
##
## For further information use the contact form at
## http://www.qt.io/contact-us.
##
##
## $QT_END_LICENSE$
##
#############################################################################
set -e

ROOT=$(dirname $(readlink -f $0))
ADB=$(which adb) || true

if [ ! -x "${ADB}" ] ; then
    # No system adb found. Try the one from Qt SDK.
    ADB="${ROOT}"/../../../b2qt/adb
    if [ ! -x "${ADB}" ] ; then
        echo "Needed command 'adb' not found in PATH."
        exit 1
    fi
fi
ADB=$(readlink -e "${ADB}")
echo "Using adb from ${ADB}"

BOOTLOADER="u-boot"

detect_target_device()
{
    "${ADB}" pull /etc/hostname
    DEVICE=$(cat hostname)
    rm -f hostname
    if [ -z "${DEVICE}" ] ; then
        echo "error: no hostname specified in /etc/hostname on a device."
        exit 1
    fi

    case "${DEVICE}" in
        *nuc*) # Intel NUC
            BOOTLOADER="grub2"
            ;;
    esac

    echo "Detected ${DEVICE} device with ${BOOTLOADER} boot loader."
}

generate_initramfs()
{
    output=$("${ADB}" shell ls /usr/sbin/ostree-prepare-root)
    substring="No such file or directory"
    if [[ $output == *${substring}* ]] ; then
        echo "error: Failed to find the required binary /usr/sbin/ostree-prepare-root on a device."
        exit 1
    fi

    output=$("${ADB}" shell ls /lib/systemd/systemd)
    systemd=false
    if [[ $output != *${substring}* ]] ; then
        systemd=true
    fi

    options='/boot/initramfs.img
            --host-only
            --add ostree
            --omit i18n
            --stdlog 3
            --force'

    if [ ${systemd} = true ] ; then
        # OSTree ships with a dracut module for systemd based images.
        echo "Generating initramfs for systemd based image ..."
        "${ADB}" push ${ROOT}/systemd/01-qt.conf /etc/dracut.conf.d/
        custom_options='--add systemd'
    else
        # Deploy our custom dracut module for systemd-less images.
        echo "Generating initramfs for system v init based image ..."
        MODULE_PATH=/usr/lib/dracut/modules.d/98ostree/
        "${ADB}" shell mkdir -p $MODULE_PATH
        "${ADB}" push ${ROOT}/systemv/module-setup.sh $MODULE_PATH
        "${ADB}" push ${ROOT}/systemv/prepare-root.sh $MODULE_PATH
        custom_options='--omit systemd'
    fi

    # Terminate when the explicitly required modules could not be found or installed.
    "${ADB}" shell dracut ${options} ${custom_options} | tee dracut.log
    errors=$(cat dracut.log | grep -i "cannot be found or installed" | wc -l)
    if [ ${errors} -gt 0 ] ; then
        echo "error: Failed to include the required modules into the initramfs image."
        exit 1
    fi

    rm -f initramfs.img
    "${ADB}" pull /boot/initramfs.img
    device=$("${ADB}" shell uname -n | tr -d '\r')
    release=$("${ADB}" shell uname -r | tr -d '\r' | cut -d'-' -f1)
    INITRAMFS=initramfs-${device}-${release}
    rm -rf ${INITRAMFS}

    detect_target_device

    if [ "${BOOTLOADER}" = "u-boot" ] ; then
        # Add u-boot header.
        mkimage -A arm -O linux -T ramdisk -a 0 -e 0 -d initramfs.img ${INITRAMFS}
        rm -f initramfs.img
    else
        mv initramfs.img ${INITRAMFS}
    fi
}

main()
{
    generate_initramfs

    echo
    echo "Done, generated OSTree boot compatible initramfs:"
    echo
    echo ${INITRAMFS}
    echo
}

main
